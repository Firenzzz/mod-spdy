#summary Design Document for mod_spdy Apache module.

=mod_spdy Design Document=

==Background==

mod_spdy is an experimental implementation of the SPDY protocol that aims to provide SPDY support in the Apache HTTPD server. mod_spdy is an Apache HTTPD 2.x module, which means it can be included in currently deployed Apache web servers via [http://httpd.apache.org/docs/2.2/mod/mod_so.html mod_so].

==SPDY==

SPDY is an experimental protocol ([http://dev.chromium.org/spdy/spdy-whitepaper whitepaper], [http://dev.chromium.org/spdy/spdy-protocol protocol]) that enables multiplexing, prioritization, and header compression of HTTP traffic.

==Apache==

Apache HTTPD is the most commonly used HTTP server on the web, used by roughly 50% of domains and 66% of the top million web sites as of January 2010, according to [http://news.netcraft.com/archives/2010/01/07/january_2010_web_server_survey.html Netcraft].

==mod_spdy==

===Filters===

Apache request/response processing is performed by a chain of filters. Each filter receives byte buffers from the previous filter in the filter chain, perform transformations on those buffers, and emit the transformed byte buffers to the next filter in the chain. The apache filter processing flow is described [http://httpd.apache.org/docs/2.2/filter.html here] and additional implementation details are covered [http://httpd.apache.org/docs/2.2/developer/filters.html here].

==Overview==

mod_spdy is an Apache 2.x filter that provides SPDY support in the Apache HTTPD web server. mod_spdy provides two Apache filters: a connection-level filter on the input side, and a transcode-level filter on the output side. The input filter receives SPDY frames and emits HTTP requests, while the output filter receives HTTP responses and emits SPDY frames. Additional details about the input and output filters are provided in the Details section.

==Details==

===Input Filter===

The mod_spdy input filter is a connection-level filter in the Apache filter chain (like mod_ssl) which runs just after the mod_ssl input filter. This allows Apache to transmit SPDY over SSL, when SSL is enabled. Note that `npn` is not currently supported in the Apache SSL implementation.

Because SPDY session state must be persisted for the lifetime of the TCP connection, the input filter is implemented as a connection-level filter. Alternatively, the input filter could be implemented as a higher level filter (e.g. a transcode filter) with the SPDY session state stored in an Apache connection configuration vector, but we do not currently see a significant benefit to hooking the input filter in at the transcode layer of the filter chain (TODO: double check this with Apache developers).

Upon receipt of a SPDY SYN_STREAM frame, the mod_spdy input filter will: 
  # extract the header block from the frame
  # emit a request status line based on the `method`, `version`, and `url` headers in the header block
  # emit an HTTP `Host` header based on the SPDY `url` header
  # emit all other headers in the header block as HTTP request headers (key-value pairs separated by a colon with a trailing CRLF)
  # emit a trailing CRLF

On receipt of a DATA frame, the input filter will emit the data in the frame (the request body) to the next filter.

During the transformation from SPDY to HTTP, SPDY metadata about the request, such as the stream id, is lost. The stream id is required by the output filter in order to package the corresponding HTTP response into SPDY frames, so this data must be communicated to the output filter.

Ideally the input filter would annotate the Apache `request_rec` structure with the stream id so it was available to the output filter. However, because the mod_spdy input filter is a connection-level filter, the `request_rec` struct does not yet exist at the time the filter is invoked (this is one reason to convert the input filter to a transcode filter). Thus, in order to communicate the stream id from input filter to output filter, an `x-spdy-request-id` header is injected into the HTTP request during the transformation from SPDY to HTTP. The output filter is able to read this information from the `request_rec.headers_in` structure.

===Output Filter===

For each HTTP response, the mod_spdy output filter receives a structured representation of the HTTP response headers (`request_rec.headers_out`) (TODO: the Apache code appears to merge headers_out and err_headers_out - do we need to do the same?) and uses those headers to populate a spdy::SpdyHeaderBlock. The spdy::SpdyHeaderBlock is used to build a SYN_REPLY frame.