#summary How to tune your server to serve pages over SPDY efficiently

= General best practices =

SPDY has different performance characteristics than HTTP, and there are a
number of [http://dev.chromium.org/spdy/spdy-best-practices best practices] you
can follow to make sure your webpages are served over SPDY as efficiently as
possible.  Some of these (such as using appropriate frame sizes) are handled
automatically by `mod_spdy`, but others (such as not sharding hostnames) are up
to the website author.

= Tuning `mod_spdy`'s resource usage =

You may find you need to tweak `mod_spdy`'s resource limits, either to give it
more to work with, or to restrict its memory/CPU usage.  See the ConfigOptions
page for more information.

= Detecting if a request is being served over SPDY =

In order to serve pages as efficiently as possible over both HTTP (for older
clients that don't support SPDY) and SPDY, it may be necessary to serve a
slightly different page for clients connecting over HTTP and SPDY.  Thus, it is
important to know when generating the resource content whether the current
request is being made over SPDY or not.

=== From PHP or a CGI script ===

For resources that are generated by PHP, by a CGI script, or by some other similar
subprocess, you can check whether the request is being served over SPDY by
checking the `SPDY_VERSION` environment variable.  For requests served over
SPDY, `mod_spdy` populates this environment variable with the SPDY version
number being used (for now, that's always "`2`", but newer SPDY versions will be supported in the future).  For non-SPDY requests, the variable is left empty.

For example, here's a small PHP snippet that detects if a page was served via
SPDY:

<code language="php">
<?php
$spdy_version = getenv('SPDY_VERSION');
if ($spdy_version) {
  echo "This page was served via SPDY (version " . $spdy_version . ").";
} else {
  echo "This page was not served via SPDY.";
}
?></code>

=== From another Apache module ===

If you are writing your own Apache module to work with `mod_spdy`, there is a
more direct method: `mod_spdy` exposes an inter-module "optional function" that
allows you to query if a particular connection is using SPDY, and if so, what
SPDY version is in use.  The declaration looks something like this:

<code language="c">
/** Returns zero if the given connection is _not_ using SPDY, and otherwise
 * returns the (non-zero) SPDY protocol version number being used on the
 * connection. */
APR_DECLARE_OPTIONAL_FN(int, spdy_get_version, (conn_rec*));</code>

Because it is declared as an optional function, you need to retrieve it before
you can use it.  Here's a snippet from a hypothetical filter module that
queries `mod_spdy` to see if the connection is using SPDY:

<code language="c">
#include "mod_spdy.h"
apr_status_t output_filter(ap_filter_t* filter, apr_bucket_brigade* brigade) {
  int spdy_version = 0;
  int (*get_version)(conn_rec*) = APR_RETRIEVE_OPTIONAL_FN(spdy_get_version);
  if (get_version != NULL) {
    spdy_version = get_version(filter->c);
  }
  if (spdy_version == 0) {
    /* do HTTP stuff */
  } else {
    /* do SPDY stuff */
  }
}</code>

For more information about using optional functions, see the
[http://apr.apache.org/docs/apr/trunk/group___a_p_r___util___opt.html APR docs on optional functions], or section 10.1.2 of
_[http://books.google.com/books?id=HTo_AmTpQPMC The Apache Modules Book]_ by
Nick Kew.

= Using SPDY server push =

The current version of `mod_spdy` does not yet support server-pushed resources, but
we are working on adding that functionality soon.  Once it has been added, we
will document here how you can use it to save on request round-trips.